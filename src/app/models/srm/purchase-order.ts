import { PaymentCondition } from "../masters/payment-condition";
import { Supplier } from "../masters/supplier";

import { PurchaseOrderProduct } from "./purchase-order-product";

export class PurchaseOrder {
    idOrderPurchase: number = -1;
    numOC: string="";
    idDocumentOC: number = -1;
    idTypeDocumentOC: number = -1;
    idDeliveryType: number = -1;
    deliveryType: string = "";
    idDeliveryMethod: number = -1;
    deliveryMethod: string = "";
    idTypeTransport: number = -1;
    typeTransport: string = "";
    idStatus: number=-1;
    status: string="";
    idBranchRequest:number =-1;
    branchRequest: string="";
    idCountryRequest:number =-1;
    countryRequest: string="";
    idPortRequest:number =-1;
    portRequest: string="";
    paymentsConditions: PaymentCondition = new PaymentCondition();
    idCompany: number =-1;
    typeDocumentOC: string ="";
    idCurrencyTypeSupplier: number =-1;
    currencyTypeSupplier: string="";
    idCurrencySupplier: number =-1;
    currencySupplier: string ="";
    idRateTypeSupplier:number =-1;
    RateTypeSupplier: string ="";
    idPaymentMethod: number =-1;
    paymentMethod: string="";
    idTaxPlan: number =-1;
    taxPlan: string="";
    idTypeNegotiation: number =-1;
    idCurrencyType: number =-1;
    currencyType: string="";
    idCurrency: number =-1;
    idCurrencyConversion:number=-1;
    urrencyConversion:string="";
    currency: string="";
    idRateType:number =-1;
    rateType: string="";
    exchangeRateSupplier:number =0;
    exchangeRate:number =0;
    idexchangeRateSupplier: number=-1;
    idexchangeRate:number=-1;
    calculationBase: boolean= true;
    cubing:number =-0;
    internalObservation: string="";
    supplierObservation: string="";
    indAproved: boolean= false;
    createdbyid:number =-1;
    createdby: string="";
    updatedbyid:number =-1;
    updatedby: string ="";
    responsibleId:number =-1;
    responsible: string="";
    approvedbyId:number =-1;
    approvedby: string="";
    deliveryDate: Date;
    deliverydeadline:Date;
    expiredDate:Date;
    dispatchDate:Date;
    createdDate:Date;
    updatedDate:Date;
    purchaseOrderProduct: PurchaseOrderProduct[];
    totalTaxable:number;
    totalDeductible:number;
    totalBase:number;
    cantItems:number;
    idReason:number=-1;
    description: string="";
    imageResponsible: string="";
    imageApprovedby: string="";
    indSimple :boolean=false;
    operatorChecks: string="";
}